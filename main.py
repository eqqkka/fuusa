import os
import telebot
from telebot import types
import random
from datetime import datetime, timedelta
import pytz
import threading
import time
import logging

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "7507582678:AAGc6onDmF5X5kyyZmOyjPXb7ob9lrBkoCQ"
PHOTO_REVIEW_GROUP_ID = -1002498200426
ACTIVITY_GROUP_ID = -1002296054466
LOG_CHAT_ID = 7823280397

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN, parse_mode="MarkdownV2")
gif_url = 'https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExdjhxb2xhaDNsbHN3Y2ZwNXNzbHB0dWVsMzVpZWR4OXV2d3VkdDdtdCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/WaExa2YxMRnyoLuITy/giphy.gif'

# –ü—Ä–∏–∑—ã –∏ –≤–µ—Å
prizes = [
    ('10 –∑–≤–µ–∑–¥', 40),
    ('15 –∑–≤–µ–∑–¥', 25),
    ('25 –∑–≤–µ–∑–¥', 20),
    ('50 –∑–≤–µ–∑–¥', 10),
    ('70 –∑–≤–µ–∑–¥!', 5)
]

# –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ MarkdownV2
def escape_markdown_v2(text: str) -> str:
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return ''.join(f'\\{c}' if c in escape_chars else c for c in text)

# –•—Ä–∞–Ω–∏–ª–∏—â–∞
message_owners = {}
claimed_messages = set()
user_activity = {}
user_activity_lock = threading.Lock()
last_award_hour = None
kz_tz = pytz.timezone('Asia/Almaty')

def choose_random_prize():
    return random.choices([p[0] for p in prizes], weights=[p[1] for p in prizes])[0]

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–æ—Ç–∑—ã–≤–æ–≤
@bot.message_handler(content_types=['photo'], chat_id=PHOTO_REVIEW_GROUP_ID)
def handle_photo_review(message):
    try:
        if not message.caption or len(message.caption.strip()) < 5:
            bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ñ–æ—Ç–æ (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤).")
            return

        msg_id = message.message_id
        user_id = message.from_user.id
        message_owners[msg_id] = user_id

        markup = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton("üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑", callback_data=f"spin:{msg_id}")
        markup.add(button)

        bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑ üéÅ", reply_markup=markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {str(e)}")
        bot.send_message(LOG_CHAT_ID, f"üö® –û—à–∏–±–∫–∞ —Ñ–æ—Ç–æ: {str(e)}")

# –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–∑–æ–≤
@bot.callback_query_handler(func=lambda call: call.data.startswith('spin:'))
def handle_spin(call):
    try:
        msg_id = int(call.data.split(':')[1])
        user_id = call.from_user.id
        username = call.from_user.username or call.from_user.first_name

        if msg_id in claimed_messages:
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –ü—Ä–∏–∑ —É–∂–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω!")
            return

        if message_owners.get(msg_id) != user_id:
            bot.answer_callback_query(call.id, "‚ùå –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑!", show_alert=True)
            return

        prize = choose_random_prize()
        claimed_messages.add(msg_id)

        bot.edit_message_reply_markup(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=None
        )

        username_md = escape_markdown_v2(username)
        prize_md = escape_markdown_v2(prize)

        bot.send_animation(call.message.chat.id, gif_url)
        bot.send_message(call.message.chat.id, f"üéâ @{username_md}, —Ç–≤–æ–π –ø—Ä–∏–∑: *{prize_md}*")
        bot.send_message(LOG_CHAT_ID, f"üéÅ –ü—Ä–∏–∑: *{prize_md}*\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username_md}")

        bot.answer_callback_query(call.id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ callback: {str(e)}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ!", show_alert=True)

# –£—á—ë—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
@bot.message_handler(content_types=['text'], chat_id=ACTIVITY_GROUP_ID)
def handle_activity(message):
    try:
        if message.from_user.is_bot:
            return

        user_id = message.from_user.id
        with user_activity_lock:
            user_activity[user_id] = user_activity.get(user_id, 0) + 1

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {str(e)}")

# –¶–∏–∫–ª –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è
def activity_award_loop():
    global last_award_hour
    allowed_hours = [11, 14, 17, 20]

    while True:
        try:
            now = datetime.now(kz_tz)
            current_hour = now.hour

            if current_hour in allowed_hours and current_hour != last_award_hour:
                top_user = None
                msg_count = 0

                with user_activity_lock:
                    if user_activity:
                        top_user, msg_count = max(user_activity.items(), key=lambda x: x[1])

                if top_user is not None:
                    try:
                        user_info = bot.get_chat_member(ACTIVITY_GROUP_ID, top_user).user
                        username = user_info.username or user_info.first_name
                        prize = choose_random_prize()

                        username_md = escape_markdown_v2(username)
                        prize_md = escape_markdown_v2(prize)

                        bot.send_animation(ACTIVITY_GROUP_ID, gif_url)
                        bot.send_message(
                            ACTIVITY_GROUP_ID,
                            f"üéä @{username_md}, —Ç—ã —Å–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —á–∞—Å–∞!\n"
                            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: *{msg_count}*\n"
                            f"üéÅ –ü—Ä–∏–∑: *{prize_md}*"
                        )
                        bot.send_message(
                            LOG_CHAT_ID,
                            f"üèÜ –ü—Ä–∏–∑ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: *{prize_md}*\nüë§ @{username_md}\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–π: *{msg_count}*"
                        )

                        with user_activity_lock:
                            user_activity.clear()
                        last_award_hour = current_hour

                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–≥—Ä–∞–¥—ã: {str(e)}")

            time.sleep(60)

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞–≥—Ä–∞–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: {str(e)}")
            time.sleep(300)

# –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞
thread = threading.Thread(target=activity_award_loop, daemon=True)
thread.start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    try:
        bot.infinity_polling()
    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        bot.send_message(LOG_CHAT_ID, f"üö® –ë–æ—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {str(e)}")
