import schedule
import time
import telebot
from telebot import types
import pytz
from datetime import datetime, timedelta
import random
import html
import threading

TOKEN = '8082470933:AAHE1S7pkiSl3Q1JLBf8RcAARMfH-OFUQwU'
if not TOKEN:
    raise Exception("TOKEN not provided")

bot = telebot.TeleBot(TOKEN)

PHOTO_REVIEW_GROUP_ID = -1002498200426
ACTIVITY_GROUP_ID = -1002296054466
LOG_GROUP_ID = -1002300029531
TARGET_GROUP_ID = ACTIVITY_GROUP_ID

kz_tz = pytz.timezone('Asia/Almaty')

# –ü—Ä–∏–∑—ã –¥–ª—è —Ñ–æ—Ç–æ–æ—Ç–∑—ã–≤–æ–≤
photo_prizes = [
    ("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –≤–æ—Ç —Ç–≤–æ–∏ 10‚≠ê", 40),
    ("–û—Ç–ª–∏—á–Ω—ã–π –æ—Ç–∑—ã–≤! –ó–∞–±–∏—Ä–∞–π 15‚≠ê", 25),
    ("–¢—ã –º–æ–ª–æ–¥–µ—Ü! 25‚≠ê –∑–∞ —Ñ–æ—Ç–æ–æ—Ç–∑—ã–≤", 15),
    ("–ü–æ–ª–æ–≤–∏–Ω–∞ –¥–∂–µ–∫–ø–æ—Ç–∞ –∑–∞ –æ—Ç–∑—ã–≤ ‚Äî 50‚≠ê", 10),
    ("–ö—Ä—É—Ç–æ! 75‚≠ê –∑–∞ –æ—Ç–∑—ã–≤", 6),
    ("–î–ñ–ï–ö–ü–û–¢ –∑–∞ –æ—Ç–∑—ã–≤!!! 100‚≠ê", 4)
]

photo_prize_gifs = {
    "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –≤–æ—Ç —Ç–≤–æ–∏ 10‚≠ê": "https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExbHJjd2o3MGd3NzN0dWhyb3k0ZHJtdDh3dW5hZzFkZWxjOTQ1b21yNiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/fYPTGG53rmDYqdWEh2/giphy.gif",
    "–û—Ç–ª–∏—á–Ω—ã–π –æ—Ç–∑—ã–≤! –ó–∞–±–∏—Ä–∞–π 15‚≠ê": "https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExdDJ5c2NzY2lrOGY0dmZidGx0dmswdWF4Mjk2anBnNGFlZGhkeW0zNCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/01V1ds7VIW4elT7z8e/giphy.gif",
    "–¢—ã –º–æ–ª–æ–¥–µ—Ü! 25‚≠ê –∑–∞ —Ñ–æ—Ç–æ–æ—Ç–∑—ã–≤": "https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExZm5tM3NyOTFzMmliZzcycWhlcTR1eW5iNm4xeHFuZW5zNHJnZGwzNCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/oSuwWNBrcTuMEuI2JT/giphy.gif",
    "–ü–æ–ª–æ–≤–∏–Ω–∞ –¥–∂–µ–∫–ø–æ—Ç–∞ –∑–∞ –æ—Ç–∑—ã–≤ ‚Äî 50‚≠ê": "https://media2.giphy.com/media/v1.Y2lkPTc5MGI3NjExZnI0c2dkY2o2ODZxdTd2bjA2cDZydjN6emt1Zmg0eWg1ZmZ1ZDc5ZiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/qaj5tYeKZngAZfUz8D/giphy.gif",
    "–ö—Ä—É—Ç–æ! 75‚≠ê –∑–∞ –æ—Ç–∑—ã–≤": "https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExcThsMnY3YTY2MTV2bzFsamxoMHgxM2NwbmppZXIwZXR5dnE5NXRyeiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/marFRLUicCgCy5TRsD/giphy.gif",
    "–î–ñ–ï–ö–ü–û–¢ –∑–∞ –æ—Ç–∑—ã–≤!!! 100‚≠ê": "https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExYmNuazl1MGF3bXptMG16ZDlkZWp1MXpmM28zMTN2MXZ0aXhhNm4zZiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/OCmfov2P22iFdGsxeY/giphy.gif"
}

# –ü—Ä–∏–∑—ã –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
activity_prizes = [
    ("–ó–∞–≥–ª—è–¥—ã–≤–∞–π —Å—é–¥–∞ –ø–æ—á–∞—â–µ, –∏ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ, –∞ –ø–æ–∫–∞ ‚Äî 10‚≠ê!", 40),
    ("–ê–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫! 15‚≠ê", 25),
    ("–¢–≤–æ–π –ø—Ä–∏–∑ ‚Äî 25‚≠ê", 15),
    ("–ü–æ–ª–æ–≤–∏–Ω–∞ –¥–∂–µ–∫–ø–æ—Ç–∞ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ‚Äî 50‚≠ê", 10),
    ("–ß—É—Ç—å—á—É—Ç—å –¥–æ –¥–∂–µ–∫–ø–æ—Ç–∞ –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ ‚Äî 75‚≠ê", 6),
    ("–î–ñ–ï–ö–ü–û–¢ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!!! 100‚≠ê", 4)
]

activity_prize_gifs = {
    "–ó–∞–≥–ª—è–¥—ã–≤–∞–π —Å—é–¥–∞ –ø–æ—á–∞—â–µ, –∏ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ, –∞ –ø–æ–∫–∞ ‚Äî 10‚≠ê!": "https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExbHJjd2o3MGd3NzN0dWhyb3k0ZHJtdDh3dW5hZzFkZWxjOTQ1b21yNiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/fYPTGG53rmDYqdWEh2/giphy.gif",
    "–ê–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫! 15‚≠ê": "https://media0.giphy.com/media/v1.Y2lkPTc5MGI3NjExdDJ5c2NzY2lrOGY0dmZidGx0dmswdWF4Mjk2anBnNGFlZGhkeW0zNCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/01V1ds7VIW4elT7z8e/giphy.gif",
    "–¢–≤–æ–π –ø—Ä–∏–∑ ‚Äî 25‚≠ê": "https://media3.giphy.com/media/v1.Y2lkPTc5MGI3NjExZm5tM3NyOTFzMmliZzcycWhlcTR1eW5iNm4xeHFuZW5zNHJnZGwzNCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/oSuwWNBrcTuMEuI2JT/giphy.gif",
    "–ü–æ–ª–æ–≤–∏–Ω–∞ –¥–∂–µ–∫–ø–æ—Ç–∞ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ‚Äî 50‚≠ê": "https://media2.giphy.com/media/v1.Y2lkPTc5MGI3NjExZnI0c2dkY2o2ODZxdTd2bjA2cDZydjN6emt1Zmg0eWg1ZmZ1ZDc5ZiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/qaj5tYeKZngAZfUz8D/giphy.gif",
    "–ß—É—Ç—å—á—É—Ç—å –¥–æ –¥–∂–µ–∫–ø–æ—Ç–∞ –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ ‚Äî 75‚≠ê": "https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExcThsMnY3YTY2MTV2bzFsamxoMHgxM2NwbmppZXIwZXR5dnE5NXRyeiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/marFRLUicCgCy5TRsD/giphy.gif",
    "–î–ñ–ï–ö–ü–û–¢ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!!! 100‚≠ê": "https://media.giphy.com/media/activity-gif6.gif"
}

message_owners = {}
claimed_messages = set()
user_activity = {}
AWARD_INTERVAL_SECONDS = 3 * 60 * 60

def choose_random_prize(prize_list):
    return random.choices(
        [prize[0] for prize in prize_list],
        weights=[prize[1] for prize in prize_list]
    )[0]

def get_user_mention(user):
    if user.username:
        return f"@{user.username}"
    else:
        name = html.escape(user.first_name or "–¥—Ä—É–≥")
        return f"<a href='tg://user?id={user.id}'>{name}</a>"

def get_mention_by_id(user_id):
    try:
        user = bot.get_chat_member(ACTIVITY_GROUP_ID, user_id).user
        return get_user_mention(user)
    except Exception:
        return f"<a href='tg://user?id={user_id}'>–ø–æ–±–µ–¥–∏—Ç–µ–ª—å</a>"

@bot.message_handler(content_types=['new_chat_members'])
def welcome_new_chat_members(message):
    if message.chat.id != TARGET_GROUP_ID:
        return
    for new_user in message.new_chat_members:
        mention = get_user_mention(new_user)
        bot.send_message(message.chat.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {mention}! –£ –Ω–∞—Å —Å–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—É—á–∞—é—Ç –ø—Ä–∏–∑—ã –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞ üéÅ", parse_mode='HTML')

@bot.message_handler(commands=['getchatid'])
def get_chat_id(message):
    bot.send_message(message.chat.id, f"Chat ID: {message.chat.id}")

@bot.message_handler(content_types=['photo'])
def handle_photo_review(message):
    if message.chat.id == PHOTO_REVIEW_GROUP_ID and message.caption:
        msg_id = message.message_id
        user_id = message.from_user.id
        message_owners[msg_id] = user_id

        markup = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton("üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑", callback_data=f"spin:{msg_id}")
        markup.add(button)
        bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑ üéÅ", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("spin:"))
def handle_spin_button(call):
    try:
        msg_id = int(call.data.split(":")[1])
        user_id = message_owners.get(msg_id)

        if call.from_user.id != user_id:
            bot.answer_callback_query(call.id, "–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è —Ç–µ–±—è!", show_alert=True)
            return

        if msg_id in claimed_messages:
            bot.answer_callback_query(call.id, "–ü—Ä–∏–∑ —É–∂–µ –ø–æ–ª—É—á–µ–Ω.")
            return

        claimed_messages.add(msg_id)
        bot.answer_callback_query(call.id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ")

        prize_text = choose_random_prize(photo_prizes)
        gif_url = photo_prize_gifs.get(prize_text)
        username_mention = get_user_mention(call.from_user)

        if gif_url:
            bot.send_animation(call.message.chat.id, gif_url)

        bot.send_message(
            call.message.chat.id,
            f"üéÅ {username_mention}, {prize_text}",
            parse_mode='HTML'
        )

        bot.send_message(
            LOG_GROUP_ID,
            f"üéÅ –ü—Ä–∏–∑ –∑–∞ –æ—Ç–∑—ã–≤\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username_mention} (ID: {call.from_user.id})\n–ü—Ä–∏–∑: {prize_text}",
            parse_mode='HTML'
        )

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–ë—É–¥–µ–º –∂–¥–∞—Ç—å –≤–∞—Å –µ—â–µ!"
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏: {e}")

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ê–ª–º–∞—Ç—ã
ALMATY_TZ = pytz.timezone("Asia/Almaty")
AWARD_HOURS = [10, 13, 16, 19, 22]  # –í—Ä–µ–º—è –ø–æ –ê–ª–º–∞—Ç–µ

@bot.message_handler(func=lambda message: message.chat.id == ACTIVITY_GROUP_ID and not message.from_user.is_bot)
def track_user_activity(message):
    user_id = message.from_user.id
    user_activity[user_id] = user_activity.get(user_id, 0) + 1

def award_most_active_user():
    global user_activity
    try:
        if not user_activity:
            print("[INFO] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è.")
        else:
            top_user_id = max(user_activity, key=user_activity.get)
            prize_text = choose_random_prize(activity_prizes)
            gif_url = activity_prize_gifs.get(prize_text)
            mention = get_mention_by_id(top_user_id)

            if gif_url:
                bot.send_animation(ACTIVITY_GROUP_ID, gif_url)

            bot.send_message(
                ACTIVITY_GROUP_ID,
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º {mention}!\nüéÅ –¢–≤–æ–π –ø—Ä–∏–∑ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {prize_text}",
                parse_mode='HTML'
            )

            bot.send_message(
                LOG_GROUP_ID,
                f"üéÅ –ü—Ä–∏–∑ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {top_user_id}\n–ü—Ä–∏–∑: {prize_text}"
            )

            print(f"[INFO] –ù–∞–≥—Ä–∞–∂–¥—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {top_user_id} –ø—Ä–∏–∑–æ–º: {prize_text}")

        user_activity = {}
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
def schedule_thread():
    while True:
        now = datetime.now(ALMATY_TZ)
        if now.minute == 0 and now.second < 30 and now.hour in AWARD_HOURS:
            award_most_active_user()
            time.sleep(60)  # –ñ–¥—ë–º –º–∏–Ω—É—Ç—É, —á—Ç–æ–±—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ
        time.sleep(30)

threading.Thread(target=schedule_thread, daemon=True).start()

print("[INFO] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
bot.infinity_polling()
