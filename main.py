import telebot
from telebot import types
import random
from datetime import datetime
import pytz
import threading
import time
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
TOKEN = "7507582678:AAEDbQCKUOSVVzg6MYhEv-KjUdax741eqn4"
PHOTO_REVIEW_GROUP_ID = -1002498200426  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã —Å —Ñ–æ—Ç–æ–æ—Ç–∑—ã–≤–∞–º–∏
ACTIVITY_GROUP_ID = -1002296054466      # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≥—Ä—É–ø–ø—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
LOG_CHAT_ID = 7823280397                 # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –¥–ª—è –ª–æ–≥–æ–≤
GIF_URL = "https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExdjhxb2xhaDNsbHN3Y2ZwNXNzbHB0dWVsMzVpZWR4OXV2d3VkdDdtdCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/WaExa2YxMRnyoLuITy/giphy.gif"
MAX_MESSAGES = 400

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN, parse_mode="Markdown")

# –ü—Ä–∏–∑—ã
PRIZES = [
    ('10 ‚≠êÔ∏è', 40),
    ('15 ‚≠êÔ∏è', 25),
    ('25 ‚≠êÔ∏è', 20),
    ('50 ‚≠êÔ∏è', 10),
    ('70 ‚≠êÔ∏è!', 5)
]

# –•—Ä–∞–Ω–∏–ª–∏—â–∞
message_owners = {}
claimed_messages = set()
user_activity = {}
last_award_hour = None
kz_tz = pytz.timezone('Asia/Almaty')


def choose_random_prize():
    return random.choices(
        [p[0] for p in PRIZES],
        weights=[p[1] for p in PRIZES]
    )[0]


@bot.message_handler(content_types=['photo'])
def handle_photo_review(message):
    try:
        if message.chat.id != PHOTO_REVIEW_GROUP_ID:
            return

        logger.info(f"–§–æ—Ç–æ–æ—Ç–∑—ã–≤ –æ—Ç @{message.from_user.username} –≤ –≥—Ä—É–ø–ø–µ")

        if not message.caption or len(message.caption.strip()) < 5:
            bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤)")
            return

        msg_id = message.message_id
        user_id = message.from_user.id

        if msg_id in claimed_messages:
            return

        message_owners[msg_id] = user_id

        markup = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton("üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑", callback_data=f"spin:{msg_id}")
        markup.add(button)

        bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑ üéÅ", reply_markup=markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        bot.send_message(LOG_CHAT_ID, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")


@bot.callback_query_handler(func=lambda call: call.data.startswith("spin:"))
def handle_spin(call):
    try:
        msg_id = int(call.data.split(":")[1])
        user_id = call.from_user.id

        if msg_id in claimed_messages:
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –ü—Ä–∏–∑ —É–∂–µ –ø–æ–ª—É—á–µ–Ω.")
            return

        if message_owners.get(msg_id) != user_id:
            bot.answer_callback_query(call.id, "‚ùå –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –æ—Ç–∑—ã–≤–∞ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑!", show_alert=True)
            return

        claimed_messages.add(msg_id)
        prize = choose_random_prize()

        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        bot.send_animation(call.message.chat.id, GIF_URL, disable_notification=True)

        username = call.from_user.username or call.from_user.first_name
        bot.send_message(call.message.chat.id, f"üéâ @{username}, –≤–∞—à –ø—Ä–∏–∑: *{prize}*")
        bot.send_message(LOG_CHAT_ID, f"üéÅ –§–æ—Ç–æ–æ—Ç–∑—ã–≤: @{username} –ø–æ–ª—É—á–∏–ª –ø—Ä–∏–∑: {prize}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–∏–∑–∞: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)


@bot.message_handler(content_types=['text'], chat_ids=[ACTIVITY_GROUP_ID])
def handle_activity(message):
    try:
        if not message.from_user.is_bot:
            user_id = message.from_user.id
            user_activity[user_id] = min(
                user_activity.get(user_id, 0) + 1,
                MAX_MESSAGES
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—á—ë—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")


def activity_award_loop():
    global last_award_hour
    allowed_hours = {11, 14, 17, 20}

    while True:
        try:
            now = datetime.now(kz_tz)
            current_hour = now.hour

            if now.minute % 5 == 0 and current_hour in allowed_hours:
                if current_hour != last_award_hour and user_activity:
                    top_user = max(user_activity.items(), key=lambda x: x[1])[0]
                    msg_count = user_activity[top_user]

                    user_info = bot.get_chat_member(ACTIVITY_GROUP_ID, top_user).user
                    username = user_info.username or user_info.first_name
                    prize = choose_random_prize()

                    bot.send_animation(ACTIVITY_GROUP_ID, GIF_URL, disable_notification=True)
                    bot.send_message(
                        ACTIVITY_GROUP_ID,
                        f"üèÜ @{username}, —Å–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π!\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {msg_count}\nüéÅ –ü—Ä–∏–∑: {prize}"
                    )
                    bot.send_message(
                        LOG_CHAT_ID,
                        f"üéâ @{username} –ø–æ–ª—É—á–∏–ª –ø—Ä–∏–∑ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {prize} ({msg_count} —Å–æ–æ–±—â–µ–Ω–∏–π)"
                    )
                    user_activity.clear()
                    last_award_hour = current_hour

            time.sleep(60)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞ –Ω–∞–≥—Ä–∞–¥: {e}")
            time.sleep(120)


def check_bot_permissions():
    try:
        bot_id = bot.get_me().id

        for chat_id in [PHOTO_REVIEW_GROUP_ID, ACTIVITY_GROUP_ID]:
            chat_member = bot.get_chat_member(chat_id, bot_id)
            if not chat_member.can_send_messages:
                raise PermissionError(f"–ù–µ—Ç –ø—Ä–∞–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ {chat_id}")

        logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ ‚Äî —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        logger.critical(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∞–≤: {e}")
        raise


if __name__ == '__main__':
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        check_bot_permissions()

        bot.send_message(LOG_CHAT_ID, "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        threading.Thread(target=activity_award_loop, daemon=True).start()
        bot.infinity_polling()

    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        bot.send_message(LOG_CHAT_ID, f"‚ùå –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
