import telebot
from telebot import types
import random
from datetime import datetime
import pytz
import threading
import time
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–ò –ó–ù–ê–ß–ï–ù–ò–Ø!)
TOKEN = "7507582678:AAEA3rC4g1PyjHpWFBCuhhD0qMenLt_1AuY"
PHOTO_REVIEW_GROUP_ID = -1002498200426    # ID –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
ACTIVITY_GROUP_ID = -1002296054466        # ID –≥—Ä—É–ø–ø—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
LOG_CHAT_ID = 7823280397                # –í–∞—à ID –¥–ª—è –ª–æ–≥–æ–≤
GIF_URL = 'https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExdjhxb2xhaDNsbHN3Y2ZwNXNzbHB0dWVsMzVpZWR4OXV2d3VkdDdtdCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/WaExa2YxMRnyoLuITy/giphy.gif'  # –°—Å—ã–ª–∫–∞ –Ω–∞ GIF
MAX_MESSAGES = 250                        # –ú–∞–∫—Å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN, parse_mode="MARKDOWN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–∑–æ–≤
PRIZES = [
    ('10 –∑–≤–µ–∑–¥', 40),
    ('15 –∑–≤–µ–∑–¥', 25),
    ('25 –∑–≤–µ–∑–¥', 20),
    ('50 –∑–≤–µ–∑–¥', 10),
    ('70 –∑–≤–µ–∑–¥!', 5)
]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
message_owners = {}
claimed_messages = set()
user_activity = {}
last_award_hour = None
kz_tz = pytz.timezone('Asia/Almaty')

def choose_random_prize():
    return random.choices(
        [p[0] for p in PRIZES], 
        weights=[p[1] for p in PRIZES]
    )[0]

@bot.message_handler(content_types=['photo'])
def handle_photo_review(message):
    try:
        chat_id = message.chat.id
        user = message.from_user
        logger.info(f"[handle_photo_review] –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. chat_id={chat_id}, from_user={user}")
        bot.send_message(LOG_CHAT_ID, f"üì∑ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ —á–∞—Ç–∞ `{chat_id}` –æ—Ç `{user.id if user else 'None'}`")

        if not user:
            logger.warning("–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ from_user (–≤–æ–∑–º–æ–∂–Ω–æ, –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∞–¥–º–∏–Ω)")
            return

        if chat_id != PHOTO_REVIEW_GROUP_ID:
            logger.info(f"–ü—Ä–æ–ø—É—Å–∫: —á–∞—Ç {chat_id} –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å PHOTO_REVIEW_GROUP_ID")
            return

        if not message.caption or len(message.caption.strip()) < 5:
            bot.reply_to(message, "‚ùå –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ñ–æ—Ç–æ (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤)")
            return

        msg_id = message.message_id
        user_id = user.id
        message_owners[msg_id] = user_id

        markup = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton("üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑", callback_data=f"spin:{msg_id}")
        markup.add(button)

        bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∑–∞ –ø—Ä–∏–∑–æ–º üéÅ", reply_markup=markup)

    except Exception as e:
        logger.error(f"[handle_photo_review] –û—à–∏–±–∫–∞: {str(e)}")
        bot.send_message(LOG_CHAT_ID, f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('spin:'))
def handle_spin(call):
    try:
        msg_id = int(call.data.split(':')[1])
        user_id = call.from_user.id
        username = call.from_user.username or call.from_user.first_name

        if msg_id in claimed_messages:
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –ü—Ä–∏–∑ —É–∂–µ –ø–æ–ª—É—á–µ–Ω!")
            return

        if message_owners.get(msg_id) != user_id:
            bot.answer_callback_query(call.id, "‚ùå –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –æ—Ç–∑—ã–≤–∞!", show_alert=True)
            return

        prize = choose_random_prize()
        claimed_messages.add(msg_id)

        bot.edit_message_reply_markup(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=None
        )

        bot.send_animation(call.message.chat.id, GIF_URL, disable_notification=True)
        bot.send_message(call.message.chat.id, f"üéâ @{username}, –≤–∞—à –ø—Ä–∏–∑: *{prize}*")
        bot.send_message(LOG_CHAT_ID, f"üéÅ –ü—Ä–∏–∑: {prize}\nüë§ @{username}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ callback: {str(e)}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞!", show_alert=True)

@bot.message_handler(content_types=['text'], chat_ids=[ACTIVITY_GROUP_ID])
def handle_activity(message):
    try:
        if not message.from_user.is_bot:
            user_id = message.from_user.id
            user_activity[user_id] = min(
                user_activity.get(user_id, 0) + 1,
                MAX_MESSAGES
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—á–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {str(e)}")

def activity_award_loop():
    global last_award_hour
    allowed_hours = {11, 14, 17, 20}

    while True:
        try:
            now = datetime.now(kz_tz)
            current_hour = now.hour

            if now.minute % 5 == 0 and current_hour in allowed_hours:
                if current_hour != last_award_hour and user_activity:
                    top_user = max(user_activity.items(), key=lambda x: x[1])[0]
                    msg_count = user_activity[top_user]
                    
                    user_info = bot.get_chat_member(ACTIVITY_GROUP_ID, top_user).user
                    username = user_info.username or user_info.first_name
                    prize = choose_random_prize()

                    bot.send_animation(ACTIVITY_GROUP_ID, GIF_URL, disable_notification=True)
                    bot.send_message(
                        ACTIVITY_GROUP_ID,
                        f"üéä @{username}, —Å–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π!\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {msg_count}\nüéÅ –ü—Ä–∏–∑: {prize}"
                    )
                    bot.send_message(LOG_CHAT_ID, f"üèÜ –ê–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: @{username}\nüí¨ {msg_count} —Å–æ–æ–±—â–µ–Ω–∏–π\nüéÅ {prize}")
                    user_activity.clear()
                    last_award_hour = current_hour

            time.sleep(300)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞ –Ω–∞–≥—Ä–∞–¥: {str(e)}")
            time.sleep(600)

def check_bot_permissions():
    try:
        chat_member = bot.get_chat_member(PHOTO_REVIEW_GROUP_ID, bot.get_me().id)
        if not chat_member.can_post_messages:
            raise PermissionError("–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ –æ—Ç–∑—ã–≤–æ–≤")

        chat_member = bot.get_chat_member(ACTIVITY_GROUP_ID, bot.get_me().id)
        if not chat_member.can_send_messages:
            raise PermissionError("–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")

        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞: {str(e)}")
        raise

if __name__ == '__main__':
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        check_bot_permissions()
        bot.send_message(LOG_CHAT_ID, "ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        
        threading.Thread(target=activity_award_loop, daemon=True).start()
        bot.infinity_polling()
        
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        bot.send_message(LOG_CHAT_ID, f"üö® –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {str(e)}")
