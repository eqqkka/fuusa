import os
import telebot
from telebot import types
import random
from datetime import datetime
import pytz
import threading
import time
import html

# –¢–æ–∫–µ–Ω
TOKEN = "7507582678:AAEQtmzKZELF8gvLnOdDrZ3hMtQ7pe6-LI8"
if not TOKEN:
    raise Exception("BOT_TOKEN")

# –ì—Ä—É–ø–ø—ã –∏ –ª–æ–≥-—á–∞—Ç
PHOTO_REVIEW_GROUP_ID = -1002498200426
ACTIVITY_GROUP_ID = -1002296054466
LOG_CHAT_ID = 7823280397

bot = telebot.TeleBot(TOKEN)

GIF_URL = 'https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExdjhxb2xoaDNsbHN3Y2ZwNXNzbHB0dWVsMzVpZWR4OXV2d3VkdDdtdCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/WaExa2YxMRnyoLuITy/giphy.gif'

prizes = [
    ('10 –∑–≤–µ–∑–¥', 40),
    ('15 –∑–≤–µ–∑–¥', 25),
    ('25 –∑–≤–µ–∑–¥', 20),
    ('50 –∑–≤–µ–∑–¥', 10),
    ('70 –∑–≤–µ–∑–¥!', 5)
]

message_owners = {}
claimed_messages = set()
user_activity = {}
last_award_hour = None

kz_tz = pytz.timezone('Asia/Almaty')

def choose_random_prize():
    return random.choices([p[0] for p in prizes], weights=[p[1] for p in prizes])[0]

# üì∑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–æ—Ç–∑—ã–≤–æ–≤
@bot.message_handler(content_types=['photo'])
def handle_photo_review(message):
    if message.chat.id == PHOTO_REVIEW_GROUP_ID and message.caption:
        msg_id = message.message_id
        user_id = message.from_user.id
        message_owners[msg_id] = user_id

        markup = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton("üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑", callback_data=f"spin:{msg_id}")
        markup.add(button)

        bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑ üéÅ", reply_markup=markup)

# üéÅ –ö–Ω–æ–ø–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞ –∑–∞ –æ—Ç–∑—ã–≤
@bot.callback_query_handler(func=lambda call: call.data.startswith('spin:'))
def handle_spin(call):
    msg_id = int(call.data.split(':')[1])
    user_id = call.from_user.id
    username = call.from_user.username or call.from_user.first_name

    if msg_id in claimed_messages:
        bot.answer_callback_query(call.id, "–ü—Ä–∏–∑ —É–∂–µ –±—ã–ª –≤—ã–¥–∞–Ω –∑–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    if message_owners.get(msg_id) != user_id:
        bot.answer_callback_query(call.id, "–¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –æ—Ç–∑—ã–≤–∞ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑!", show_alert=True)
        return

    prize = choose_random_prize()
    claimed_messages.add(msg_id)

    bot.send_animation(call.message.chat.id, GIF_URL)
    bot.send_message(call.message.chat.id, f"üéâ @{username}, —Ç–≤–æ–π –ø—Ä–∏–∑: *{prize}*", parse_mode="Markdown")
    bot.send_message(LOG_CHAT_ID, f"üéÅ –ü—Ä–∏–∑: *{prize}*\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}", parse_mode="Markdown")
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    bot.answer_callback_query(call.id)

# üßæ –£—á—ë—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
@bot.message_handler(content_types=['text'])
def handle_activity(message):
    if message.chat.id == ACTIVITY_GROUP_ID:
        user_id = message.from_user.id
        user_activity[user_id] = user_activity.get(user_id, 0) + 1

# üéÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–∏–∑–æ–≤ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
@bot.callback_query_handler(func=lambda call: call.data == "get_prize")
def handle_get_prize(call):
    user_id = call.from_user.id
    username = call.from_user.username or call.from_user.first_name

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ
    # –ù–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ

    bot.answer_callback_query(call.id, f"üéâ @{username}, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–∏–∑–æ–º!")
    bot.send_message(LOG_CHAT_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –ø–æ–ª—É—á–∏–ª –ø—Ä–∏–∑ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.")
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

# üïí –¢–∞–π–º–µ—Ä –≤—ã–¥–∞—á–∏ –ø—Ä–∏–∑–∞ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
def activity_award_loop():
    global last_award_hour
    allowed_hours = [11, 14, 17, 20]

    while True:
        now = datetime.now(kz_tz)
        current_hour = now.hour

        if current_hour in allowed_hours and current_hour != last_award_hour:
            if user_activity:
                top_user = max(user_activity.items(), key=lambda x: x[1])[0]
                msg_count = user_activity[top_user]
                try:
                    user_info = bot.get_chat_member(ACTIVITY_GROUP_ID, top_user).user
                    username = user_info.username or user_info.first_name
                except Exception:
                    username = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

                prize = choose_random_prize()

                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ HTML
                username_escaped = html.escape(username)
                prize_escaped = html.escape(prize)

                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑", callback_data="get_prize"))

                bot.send_animation(ACTIVITY_GROUP_ID, GIF_URL)
                bot.send_message(
                    ACTIVITY_GROUP_ID,
                    f"üéä <b>@{username_escaped}</b>, —Ç—ã —Å–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —á–∞—Å–∞!\n"
                    f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: <b>{msg_count}</b>\n"
                    f"üéÅ –ü—Ä–∏–∑: <b>{prize_escaped}</b>",
                    parse_mode="HTML",
                    reply_markup=markup
                )
                bot.send_message(
                    LOG_CHAT_ID,
                    f"üèÜ –ü—Ä–∏–∑ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: <b>{prize_escaped}</b>\n"
                    f"üë§ <b>@{username_escaped}</b>\n"
                    f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: <b>{msg_count}</b>",
                    parse_mode="HTML"
                )

                user_activity.clear()
                last_award_hour = current_hour
            else:
                print("üö´ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è.")

        time.sleep(60)

threading.Thread(target=activity_award_loop, daemon=True).start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
