import os
import telebot
from telebot import types
import random
from datetime import datetime, timedelta
import pytz
import threading
import time
import logging
from collections import deque

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "7507582678:AAFRmqHBR4rOICgDlnKQyPnQbBb5n7AkJpw"
PHOTO_REVIEW_GROUP_ID = -1002498200426
ACTIVITY_GROUP_ID = -1002296054466
LOG_CHAT_ID = 7823280397

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN, parse_mode="MARKDOWN")
gif_url = 'https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExdjhxb2xhaDNsbHN3Y2ZwNXNzbHB0dWVsMzVpZWR4OXV2d3VkdDdtdCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/WaExa2YxMRnyoLuITy/giphy.gif'

prizes = [
    ('10 –∑–≤–µ–∑–¥', 40),
    ('15 –∑–≤–µ–∑–¥', 25),
    ('25 –∑–≤–µ–∑–¥', 20),
    ('50 –∑–≤–µ–∑–¥', 10),
    ('70 –∑–≤–µ–∑–¥!', 5)
]

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
message_owners = {}
claimed_messages = set()
user_activity = {}
user_activity_lock = threading.Lock()
status_cooldown = deque(maxlen=3)
last_award_hour = None
kz_tz = pytz.timezone('Asia/Almaty')

def choose_random_prize():
    return random.choices([p[0] for p in prizes], weights=[p[1] for p in prizes])[0]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['photo'], chat_id=PHOTO_REVIEW_GROUP_ID)
def handle_photo_review(message):
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç {message.from_user.id}")
        
        if not message.caption or len(message.caption.strip()) < 5:
            bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ñ–æ—Ç–æ (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤).")
            return

        msg_id = message.message_id
        user_id = message.from_user.id
        message_owners[msg_id] = user_id

        markup = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton("üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑", callback_data=f"spin:{msg_id}")
        markup.add(button)

        bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑ üéÅ", reply_markup=markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {str(e)}")
        bot.send_message(LOG_CHAT_ID, f"üö® –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–æ—Ç–∑—ã–≤–∞: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('spin:'))
def handle_spin(call):
    try:
        msg_id = int(call.data.split(':')[1])
        user_id = call.from_user.id
        username = call.from_user.username or call.from_user.first_name

        if msg_id in claimed_messages:
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –ü—Ä–∏–∑ —É–∂–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω –∑–∞ —ç—Ç–æ—Ç –æ—Ç–∑—ã–≤!")
            return

        if message_owners.get(msg_id) != user_id:
            bot.answer_callback_query(call.id, "‚ùå –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –æ—Ç–∑—ã–≤–∞ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑!", show_alert=True)
            return

        prize = choose_random_prize()
        claimed_messages.add(msg_id)

        try:
            bot.edit_message_reply_markup(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=None
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏: {str(e)}")

        bot.send_animation(call.message.chat.id, gif_url)
        bot.send_message(call.message.chat.id, f"üéâ @{username}, —Ç–≤–æ–π –ø—Ä–∏–∑: *{prize}*")
        bot.send_message(LOG_CHAT_ID, f"üéÅ –ü—Ä–∏–∑: *{prize}*\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}")

        bot.answer_callback_query(call.id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback: {str(e)}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞!", show_alert=True)

@bot.message_handler(content_types=['text'], chat_id=ACTIVITY_GROUP_ID)
def handle_activity(message):
    try:
        if message.from_user.is_bot:
            return
            
        user_id = message.from_user.id
        with user_activity_lock:
            user_activity[user_id] = user_activity.get(user_id, 0) + 1
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—á–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {str(e)}")

# –°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
@bot.message_handler(commands=['status'], chat_types=['supergroup', 'group'], chat_id=ACTIVITY_GROUP_ID)
def send_activity_status(message):
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –≤ —á–∞—Ç–µ {message.chat.id}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∑–∞–ø—Ä–æ—Å –≤ –Ω—É–∂–Ω–æ–º —á–∞—Ç–µ
        if message.chat.id != ACTIVITY_GROUP_ID:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤ —á—É–∂–æ–º —á–∞—Ç–µ: {message.chat.id}")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try:
            member = bot.get_chat_member(message.chat.id, message.from_user.id)
            if member.status not in ['administrator', 'creator']:
                bot.reply_to(message, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
                return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {str(e)}")
            return

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        status_info = (
            "üìä *–°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏* üìä\n\n"
            f"üèÜ –¢–µ–∫—É—â–∏–π –ª–∏–¥–µ—Ä: {get_top_user()}\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥: {get_total_messages()}\n"
            f"üéÅ –í—ã–¥–∞–Ω–æ –ø—Ä–∏–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {len(claimed_messages)}\n"
            f"‚è≥ –°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: {next_award_time()}"
        )
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_status"))
        
        bot.send_message(
            chat_id=ACTIVITY_GROUP_ID,
            text=status_info,
            parse_mode="Markdown",
            reply_markup=markup
        )
        logger.info(f"–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {ACTIVITY_GROUP_ID}")

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ: {str(e)}")
        bot.send_message(LOG_CHAT_ID, f"üö® –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data == "refresh_status")
def refresh_status(call):
    try:
        if call.from_user.id in status_cooldown:
            bot.answer_callback_query(call.id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 3 –º–∏–Ω—É—Ç—ã –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º!")
            return
            
        status_cooldown.append(call.from_user.id)
        send_activity_status()
        bot.answer_callback_query(call.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_top_user():
    with user_activity_lock:
        if not user_activity:
            return "–ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        top_user_id = max(user_activity, key=user_activity.get)
        
    try:
        user = bot.get_chat_member(ACTIVITY_GROUP_ID, top_user_id).user
        return f"@{user.username}" if user.username else user.first_name
    except:
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

def get_total_messages():
    with user_activity_lock:
        return sum(user_activity.values()) if user_activity else 0

def next_award_time():
    now = datetime.now(kz_tz)
    allowed_hours = [11, 14, 17, 20]
    
    for hour in allowed_hours:
        if now.hour < hour:
            next_time = now.replace(hour=hour, minute=0, second=0)
            return next_time.strftime("%H:%M")
    return "–∑–∞–≤—Ç—Ä–∞ –≤ 11:00"

# –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥—Ä–∞–¥ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
def activity_award_loop():
    global last_award_hour
    allowed_hours = [11, 14, 17, 20]

    while True:
        try:
            now = datetime.now(kz_tz)
            current_hour = now.hour

            if current_hour in allowed_hours and current_hour != last_award_hour:
                send_activity_status()
                
                with user_activity_lock:
                    if user_activity:
                        top_user = max(user_activity.items(), key=lambda x: x[1])[0]
                        msg_count = user_activity[top_user]
                    else:
                        top_user = None

                if top_user:
                    try:
                        user_info = bot.get_chat_member(ACTIVITY_GROUP_ID, top_user).user
                        username = user_info.username or user_info.first_name
                        prize = choose_random_prize()

                        bot.send_animation(ACTIVITY_GROUP_ID, gif_url)
                        bot.send_message(
                            ACTIVITY_GROUP_ID,
                            f"üéä @{username}, —Ç—ã —Å–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —á–∞—Å–∞!\n"
                            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: *{msg_count}*\n"
                            f"üéÅ –ü—Ä–∏–∑: *{prize}*"
                        )
                        bot.send_message(
                            LOG_CHAT_ID,
                            f"üèÜ –ü—Ä–∏–∑ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: *{prize}*\nüë§ @{username}\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–π: *{msg_count}*"
                        )

                        with user_activity_lock:
                            user_activity.clear()
                        last_award_hour = current_hour

                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –ø—Ä–∏–∑–∞ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {str(e)}")

            time.sleep(60)

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –Ω–∞–≥—Ä–∞–¥: {str(e)}")
            time.sleep(300)

# –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
thread = threading.Thread(target=activity_award_loop, daemon=True)
thread.start()

if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    try:
        bot.infinity_polling()
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        bot.send_message(LOG_CHAT_ID, f"üö® –ë–æ—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {str(e)}")
