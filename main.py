import telebot
from telebot import types
import random
from datetime import datetime
import pytz
import threading
import time
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = '7507582678:AAEA3rC4g1PyjHpWFBCuhhD0qMenLt_1AuY'
PHOTO_REVIEW_GROUP_ID = -1002498200426   # –ì—Ä—É–ø–ø–∞ –¥–ª—è —Ñ–æ—Ç–æ–æ—Ç–∑—ã–≤–æ–≤
ACTIVITY_GROUP_ID = -1002296054466      # –ì—Ä—É–ø–ø–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
LOG_CHAT_ID = 7823280397                  # –ß–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤
GIF_URL = 'https://media1.giphy.com/media/v1.Y2lkPTc5MGI3NjExdjhxb2xhaDNsbHN3Y2ZwNXNzbHB0dWVsMzVpZWR4OXV2d3VkdDdtdCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/WaExa2YxMRnyoLuITy/giphy.gif'
MAX_MESSAGES = 666                       # –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

bot = telebot.TeleBot(TOKEN, parse_mode='MARKDOWN')

# –ü—Ä–∏–∑—ã
PRIZES = [
    ('10 –∑–≤–µ–∑–¥', 40),
    ('15 –∑–≤–µ–∑–¥', 25),
    ('25 –∑–≤–µ–∑–¥', 20),
    ('50 –∑–≤–µ–∑–¥', 10),
    ('70 –∑–≤–µ–∑–¥!', 5)
]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
claimed_messages = set()
message_owners = {}
user_activity = {}
last_award_hour = None
kz_tz = pytz.timezone('Asia/Almaty')

# –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–∑
def choose_random_prize():
    return random.choices(
        [p[0] for p in PRIZES],
        weights=[p[1] for p in PRIZES]
    )[0]

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
@bot.message_handler(content_types=['photo'])
def handle_photo_review(message):
    try:
        if message.chat.id != PHOTO_REVIEW_GROUP_ID:
            return

        if not message.caption or len(message.caption.strip()) < 5:
            bot.reply_to(message, "‚ùå –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤)")
            return

        msg_id = message.message_id
        user_id = message.from_user.id
        message_owners[msg_id] = user_id

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑", callback_data=f"spin:{msg_id}"))

        bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑ üéÅ", reply_markup=markup)

    except Exception as e:
        logger.error(f"[handle_photo_review] {e}")
        bot.send_message(LOG_CHAT_ID, f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑"
@bot.callback_query_handler(func=lambda call: call.data.startswith('spin:'))
def handle_spin(call):
    try:
        msg_id = int(call.data.split(':')[1])
        user_id = call.from_user.id
        username = call.from_user.username or call.from_user.first_name

        if msg_id in claimed_messages:
            bot.answer_callback_query(call.id, "‚ö†Ô∏è –ü—Ä–∏–∑ —É–∂–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω.")
            return

        if message_owners.get(msg_id) != user_id:
            bot.answer_callback_query(call.id, "‚ùå –¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –æ—Ç–∑—ã–≤–∞ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑.", show_alert=True)
            return

        prize = choose_random_prize()
        claimed_messages.add(msg_id)

        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        bot.send_animation(call.message.chat.id, GIF_URL, disable_notification=True)
        bot.send_message(call.message.chat.id, f"üéâ @{username}, –≤–∞—à –ø—Ä–∏–∑: *{prize}*")
        bot.send_message(LOG_CHAT_ID, f"üéÅ –ü—Ä–∏–∑: {prize}\nüë§ @{username}")

    except Exception as e:
        logger.error(f"[handle_spin] {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏", show_alert=True)

# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –≥—Ä—É–ø–ø–µ
@bot.message_handler(func=lambda msg: msg.chat.id == ACTIVITY_GROUP_ID and not msg.from_user.is_bot)
def handle_activity(message):
    try:
        user_id = message.from_user.id
        user_activity[user_id] = min(user_activity.get(user_id, 0) + 1, MAX_MESSAGES)
    except Exception as e:
        logger.error(f"[handle_activity] {e}")

# –¶–∏–∫–ª –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
def activity_award_loop():
    global last_award_hour
    allowed_hours = {11, 14, 17, 20}  # –ö–∞–∂–¥—ã–µ 3 —á–∞—Å–∞ –≤ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è

    while True:
        try:
            now = datetime.now(kz_tz)
            if now.hour in allowed_hours and now.hour != last_award_hour:
                if user_activity:
                    top_user_id, top_count = max(user_activity.items(), key=lambda x: x[1])
                    user = bot.get_chat_member(ACTIVITY_GROUP_ID, top_user_id).user
                    username = user.username or user.first_name
                    prize = choose_random_prize()

                    bot.send_animation(ACTIVITY_GROUP_ID, GIF_URL, disable_notification=True)
                    bot.send_message(
                        ACTIVITY_GROUP_ID,
                        f"üèÜ @{username} ‚Äî —Å–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫!\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {top_count}\nüéÅ –ü—Ä–∏–∑: *{prize}*"
                    )
                    bot.send_message(
                        LOG_CHAT_ID,
                        f"üèÜ @{username} –ø–æ–ª—É—á–∏–ª –ø—Ä–∏–∑ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\nüí¨ {top_count} —Å–æ–æ–±—â–µ–Ω–∏–π\nüéÅ {prize}"
                    )

                    user_activity.clear()
                    last_award_hour = now.hour

            time.sleep(60)

        except Exception as e:
            logger.error(f"[activity_award_loop] {e}")
            time.sleep(60)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö
def check_bot_permissions():
    try:
        bot.get_chat_member(PHOTO_REVIEW_GROUP_ID, bot.get_me().id)
        bot.get_chat_member(ACTIVITY_GROUP_ID, bot.get_me().id)
        logger.info("–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
    except Exception as e:
        logger.critical(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞: {e}")
        raise

if __name__ == '__main__':
    try:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        check_bot_permissions()
        bot.send_message(LOG_CHAT_ID, "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")

        threading.Thread(target=activity_award_loop, daemon=True).start()
        bot.infinity_polling()
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        bot.send_message(LOG_CHAT_ID, f"‚ùå –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")
